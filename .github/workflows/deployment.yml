name: Deploy Serverless Framework to AWS

on:
  push:
    branches: [ master ]
    tags:
      - '[0-9]*.[0-9]*.[0-9]*'

env:
  NODEJS_VERSION: '18'
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.4.0'
  AWS_DEPLOY_REGION: "eu-west-1"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Poetry
      uses: actions/cache@v3
      id: poetry-cache
      with:
        path: /home/runner/.local
        key: poetry-${{ env.POETRY_VERSION }}
        restore-keys: |
          poetry-${{ env.POETRY_VERSION }}

    - name: Set up Poetry
      if: steps.poetry-cache.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Poetry config
      run: |
        poetry config virtualenvs.path ~/.virtualenvs

    - name: Cache Poetry virtualenv
      uses: actions/cache@v3
      id: poetry-cache-env
      with:
        path: /home/runner/.virtualenvs
        key: poetry-env-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-env-${{ hashFiles('**/poetry.lock') }}

    - name: Install Dependencies
      if: steps.poetry-cache-env.outputs.cache-hit != 'true'
      run: |
        poetry install --no-root

    - name: Run tests
      run: |
        cd tests/
        poetry run pytest

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODEJS_VERSION }}

    - name: Cache node dependencies
      uses: actions/cache@v3
      id: npm-cache
      with:
        path: /home/runner/work/exchange-rates/exchange-rates/node_modules
        key: node-${{ hashFiles('package-lock.json') }}
        restore-keys: node-${{ hashFiles('package-lock.json') }}

    - name: Install node dependencies
      if: steps.npm-cache.outputs.cache-hit != 'true'
      run: npm install

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEPLOY_REGION }}

    - name: Deploy
      run: ./node_modules/.bin/serverless deploy --region ${{ env.AWS_DEPLOY_REGION }}
